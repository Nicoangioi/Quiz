
import java.awt.MouseInfo;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author nicoa
 */
public class ElencoQuiz extends javax.swing.JFrame {

    DefaultTableModel m = new DefaultTableModel();



    /**
     * Creates new form ElencoQuiz
     */
    private final JPopupMenu pop = new JPopupMenu();
    private JMenuItem elimina = null;
    private JMenuItem modifica = null;

    public ElencoQuiz() {
        initComponents();
        this.setLocationRelativeTo(null);
        EliminaMenu(this);
        ModificaMenu(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        L_materia = new javax.swing.JLabel();
        tf_materia = new javax.swing.JTextField();
        L_domanda = new javax.swing.JLabel();
        tf_domanda = new javax.swing.JTextField();
        L_risCorr = new javax.swing.JLabel();
        tf_risCorr = new javax.swing.JTextField();
        L_risSbagl1 = new javax.swing.JLabel();
        tf_risSbagl1 = new javax.swing.JTextField();
        L_risSbagl2 = new javax.swing.JLabel();
        tf_risSbagl2 = new javax.swing.JTextField();
        L_risSbagl3 = new javax.swing.JLabel();
        tf_risSbagl3 = new javax.swing.JTextField();
        b_aggiungi = new javax.swing.JButton();
        PanelTabella = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        L_materia.setText("Materia:");

        tf_materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_materiaActionPerformed(evt);
            }
        });

        L_domanda.setText("Domanda:");

        L_risCorr.setText("RIsposta Corretta");

        L_risSbagl1.setText("Risposta Sbagliata 1");

        L_risSbagl2.setText("Risposta Sbagliata 2");

        L_risSbagl3.setText("Risposta Sbagliata 3");

        b_aggiungi.setText("Aggiungi");
        b_aggiungi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_aggiungiActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Materia", "Domanda", "Risposta Corretta", "Risposta Sbagliata 1", "Risposta Sbagliata 2", "Risposta Sbagliata 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout PanelTabellaLayout = new javax.swing.GroupLayout(PanelTabella);
        PanelTabella.setLayout(PanelTabellaLayout);
        PanelTabellaLayout.setHorizontalGroup(
            PanelTabellaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTabellaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelTabellaLayout.setVerticalGroup(
            PanelTabellaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTabellaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addGap(46, 46, 46))
        );

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(L_risSbagl3)
                            .addGap(82, 82, 82)
                            .addComponent(tf_risSbagl3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(L_risSbagl2)
                            .addGap(82, 82, 82)
                            .addComponent(tf_risSbagl2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(L_risSbagl1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(L_materia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(L_risCorr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(L_domanda, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(82, 82, 82)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tf_domanda, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tf_materia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(tf_risCorr, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tf_risSbagl1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(b_aggiungi, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addComponent(PanelTabella, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_materia)
                            .addComponent(tf_materia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_domanda)
                            .addComponent(tf_domanda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_risCorr)
                            .addComponent(tf_risCorr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_risSbagl1)
                            .addComponent(tf_risSbagl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_risSbagl2)
                            .addComponent(tf_risSbagl2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(L_risSbagl3)
                            .addComponent(tf_risSbagl3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(88, 88, 88)
                        .addComponent(b_aggiungi)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(PanelTabella, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_materiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_materiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_materiaActionPerformed
    
    
   
    
    
    
    //aggiungiamo i quiz al database e alla tabella
    private void b_aggiungiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_aggiungiActionPerformed
        String materia = tf_materia.getText();
        String domanda = tf_domanda.getText();
        String risposta_corretta = tf_risCorr.getText();
        String risposta1_sbagliata = tf_risSbagl1.getText();
        String risposta2_sbagliata = tf_risSbagl2.getText();
        String risposta3_sbagliata = tf_risSbagl3.getText();

        try {
            Connection c = DriverManager.getConnection(connessione.Jdbc);

            String q = "INSERT INTO ";
            if (materia.equalsIgnoreCase("storia")) {
                QuizStoria qs = new QuizStoria();
                q += "quiz_storia";
            } else if (materia.equalsIgnoreCase("geografia")) {
                QuizGeo qg = new QuizGeo();
                q += "quiz_geo";
            } else if (materia.equalsIgnoreCase("cinema")) {
                QuizCinema qc = new QuizCinema();
                q += "quiz_cinema";
            } else if (materia.equalsIgnoreCase("sport")) {
                QuizSport qsp = new QuizSport();
                q += "quiz_sport";
            } else {
                JOptionPane.showMessageDialog(this, "Materia non supportata");
                return;
            }
            q += " (domanda, risposta_corretta, risposta_sbagliata1, risposta_sbagliata2, risposta_sbagliata3) VALUES (?, ?, ?, ?, ?)";

            PreparedStatement s = c.prepareStatement(q);

            s.setString(1, domanda);
            s.setString(2, risposta_corretta);
            s.setString(3, risposta1_sbagliata);
            s.setString(4, risposta2_sbagliata);
            s.setString(5, risposta3_sbagliata);

            s.executeUpdate();

            m = (DefaultTableModel) jTable1.getModel();
            
            
            
            
            m.addRow(new Object[]{materia, domanda, risposta_corretta, risposta1_sbagliata, risposta2_sbagliata, risposta3_sbagliata});
            
            

            

            JOptionPane.showMessageDialog(this, "Domanda aggiunta con successo");

            tf_materia.setText(null);
            tf_domanda.setText(null);
            tf_risCorr.setText(null);
            tf_risSbagl1.setText(null);
            tf_risSbagl2.setText(null);
            tf_risSbagl3.setText(null);
            
        } catch (SQLException ex) {
            Logger.getLogger(ElencoQuiz.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Errore durante l'aggiunta della domanda");
        }
    }//GEN-LAST:event_b_aggiungiActionPerformed
    
    
    //rendiamo la tabella cliccabile
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked


        int posizioneMouseX = MouseInfo.getPointerInfo().getLocation().x;
        int posizioneMouseY = MouseInfo.getPointerInfo().getLocation().y;

        pop.show(this, posizioneMouseX, posizioneMouseY);
    }//GEN-LAST:event_jTable1MouseClicked
    
    //quando clicchiamo il bottone ci riporta alla home
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.setVisible(false);
        Home ho = new Home();
        ho.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ElencoQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ElencoQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ElencoQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ElencoQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ElencoQuiz().setVisible(true);
            }
        });
    }
    
   //metodo per caricare i dati in tabella
    public void CaricaDatiTabella() throws SQLException, ClassNotFoundException {
        QuizStoria qs = new QuizStoria();
        QuizGeo qg = new QuizGeo();
        QuizCinema qc = new QuizCinema();
        QuizSport qsp = new QuizSport();

        if (qs.quiz != null) {

            for (int i = 0; i < qs.quiz.size(); i++) {
                ArrayList<String> quizTab = qs.quiz.get(i);
                String materia = "storia";
                String domanda = quizTab.get(0);
                String risposta_corretta = quizTab.get(1);
                String risposta1_sbagliata = quizTab.get(2);
                String risposta2_sbagliata = quizTab.get(3);
                String risposta3_sbagliata = quizTab.get(4);


                System.out.println(domanda);

                m = (DefaultTableModel) jTable1.getModel();
                m.addRow(new Object[]{materia, domanda, risposta_corretta, risposta1_sbagliata, risposta2_sbagliata, risposta3_sbagliata});
            }
        }

        if (qg.quiz != null) {
            for (int i = 0; i < qg.quiz.size(); i++) {
                ArrayList<String> quizTab = qg.quiz.get(i);
                String materia = "geografia";
                String domanda = quizTab.get(0);
                String risposta_corretta = quizTab.get(1);
                String risposta1_sbagliata = quizTab.get(2);
                String risposta2_sbagliata = quizTab.get(3);
                String risposta3_sbagliata = quizTab.get(4);


                System.out.println(domanda);

                m = (DefaultTableModel) jTable1.getModel();
                m.addRow(new Object[]{materia, domanda, risposta_corretta, risposta1_sbagliata, risposta2_sbagliata, risposta3_sbagliata});
            }
        }

        if (qc.quiz != null) {
            for (int i = 0; i < qc.quiz.size(); i++) {
                ArrayList<String> quizTab = qc.quiz.get(i);
                String materia = "cinema";
                String domanda = quizTab.get(0);
                String risposta_corretta = quizTab.get(1);
                String risposta1_sbagliata = quizTab.get(2);
                String risposta2_sbagliata = quizTab.get(3);
                String risposta3_sbagliata = quizTab.get(4);


                System.out.println(domanda);

                m = (DefaultTableModel) jTable1.getModel();
                m.addRow(new Object[]{materia, domanda, risposta_corretta, risposta1_sbagliata, risposta2_sbagliata, risposta3_sbagliata});
            }

        }

        if (qsp.quiz != null) {
            for (int i = 0; i < qsp.quiz.size(); i++) {
                ArrayList<String> quizTab = qsp.quiz.get(i);
                String materia = "sport";
                String domanda = quizTab.get(0);
                String risposta_corretta = quizTab.get(1);
                String risposta1_sbagliata = quizTab.get(2);
                String risposta2_sbagliata = quizTab.get(3);
                String risposta3_sbagliata = quizTab.get(4);


                System.out.println(domanda);

                m = (DefaultTableModel) jTable1.getModel();
                m.addRow(new Object[]{materia, domanda, risposta_corretta, risposta1_sbagliata, risposta2_sbagliata, risposta3_sbagliata});
            }
        }

    }

    //metodo Elimina menu 
    private void EliminaMenu(JFrame frame) {
        elimina = new JMenuItem(
                "Elimina"
        //volendo si potrebbe inserire un immagine qui
        );

        elimina.getAccessibleContext().setAccessibleDescription("Elimina");

        elimina.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                eliminaRiga();
            }
        });

        pop.add(elimina);

    }

    //metodo Modifica menu 
    private void ModificaMenu(JFrame frame) {
        modifica = new JMenuItem(
                "Modifica"
        //volendo si potrebbe inserire un immagine qui
        );

        modifica.getAccessibleContext().setAccessibleDescription("Modifica");

        modifica.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ModificaRiga();
            }
        });

        pop.add(modifica);

    }
    
    //metodo per eliminare una riga della tabella e la sua corrispondente riga nel db
    private void eliminaRiga() {
        int rigaSelezionata = jTable1.getSelectedRow();
        if (rigaSelezionata != -1) {
            try {
                String materia = (String) m.getValueAt(rigaSelezionata, 0);
                String domanda = (String) m.getValueAt(rigaSelezionata, 1);

                String q = "DELETE FROM ";
                if (materia.equalsIgnoreCase("storia")) {
                    q += "quiz_storia";
                } else if (materia.equalsIgnoreCase("geografia")) {
                    q += "quiz_geo";
                } else if (materia.equalsIgnoreCase("cinema")) {
                    q += "quiz_cinema";
                } else if (materia.equalsIgnoreCase("sport")) {
                    q += "quiz_sport";
                } else {
                    JOptionPane.showMessageDialog(this, "Materia non supportata");
                    return;
                }
                q += " WHERE domanda = ?";

                Connection c = DriverManager.getConnection(connessione.Jdbc);
                PreparedStatement s = c.prepareStatement(q);
                s.setString(1, domanda);
                s.executeUpdate();

                m.removeRow(rigaSelezionata);

                JOptionPane.showMessageDialog(this, "Riga eliminata con successo");
            } catch (SQLException ex) {
                Logger.getLogger(ElencoQuiz.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Errore durante l'eliminazione della riga");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleziona una riga da eliminare");
        }
    }
    
    //metodo per modificare una riga della tabella e la sua corrispondente riga nel db
    private void ModificaRiga() {
        int rigaSelezionata = jTable1.getSelectedRow();
        if (rigaSelezionata != -1) {
            String materia = (String) m.getValueAt(rigaSelezionata, 0);
            String domanda = (String) m.getValueAt(rigaSelezionata, 1);
            String risCorr = (String) m.getValueAt(rigaSelezionata, 2);
            String ris1Sbagl = (String) m.getValueAt(rigaSelezionata, 3);
            String ris2Sbagl = (String) m.getValueAt(rigaSelezionata, 4);
            String ris3Sbagl = (String) m.getValueAt(rigaSelezionata, 5);

            if (materia.equals("storia")) {
                QuizStoria qs = new QuizStoria();
                for (int i = 0; i < qs.quiz.size(); i++) {
                    ArrayList<String> quizTab = qs.quiz.get(i);
                    String materiaDb = "storia";
                    String domandaDb = quizTab.get(0);
                    String risCorrDb = quizTab.get(1);
                    String ris1SbaglDb = quizTab.get(2);
                    String ris2SbaglDb = quizTab.get(3);
                    String ris3SbaglDb = quizTab.get(4);

                    if (materia.equals(materiaDb) && domanda.equals(domandaDb) && risCorr.equals(risCorrDb) && ris1Sbagl.equals(ris1SbaglDb) && ris2Sbagl.equals(ris2SbaglDb) && ris3Sbagl.equals(ris3SbaglDb)) {
                        JOptionPane.showMessageDialog(null, "Modifica prima i campi attraverso la tabella e poi seleziona il menu cliccando sulla riga da modificare");
                        return; // Esco dal metodo se trovo una corrispondenza
                    } else {
                        String materiaNuovo = (String) m.getValueAt(rigaSelezionata, 0);
                        String domandaNuovo = (String) m.getValueAt(rigaSelezionata, 1);
                        String risCorrNuovo = (String) m.getValueAt(rigaSelezionata, 2);
                        String ris1SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 3);
                        String ris2SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 4);
                        String ris3SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 5);

                        try {
                            Connection c = DriverManager.getConnection(connessione.Jdbc);

                            String q = "UPDATE ";
                            if (materia.equalsIgnoreCase("storia")) {
                                q += "quiz_storia";
                            } else if (materia.equalsIgnoreCase("geografia")) {
                                q += "quiz_geo";
                            } else if (materia.equalsIgnoreCase("cinema")) {
                                q += "quiz_cinema";
                            } else if (materia.equalsIgnoreCase("sport")) {
                                q += "quiz_sport";
                            } else {
                                JOptionPane.showMessageDialog(this, "Materia non supportata");
                                return;
                            }
                            q += " SET domanda = ?, risposta_corretta = ?, risposta_sbagliata1 = ?, risposta_sbagliata2 = ?, risposta_sbagliata3 = ? WHERE domanda = ?";

                            PreparedStatement s = c.prepareStatement(q);
                            s.setString(1, domandaNuovo);
                            s.setString(2, risCorrNuovo);
                            s.setString(3, ris1SbaglNuovo);
                            s.setString(4, ris2SbaglNuovo);
                            s.setString(5, ris3SbaglNuovo);
                            s.setString(6, domanda); // Utilizzo la domanda originale per fare la ricerca per l'aggiornamento

                            s.executeUpdate();

                            // Aggiorno i valori nella tabella
                            m.setValueAt(materiaNuovo, rigaSelezionata, 0);
                            m.setValueAt(domandaNuovo, rigaSelezionata, 1);
                            m.setValueAt(risCorrNuovo, rigaSelezionata, 2);
                            m.setValueAt(ris1SbaglNuovo, rigaSelezionata, 3);
                            m.setValueAt(ris2SbaglNuovo, rigaSelezionata, 4);
                            m.setValueAt(ris3SbaglNuovo, rigaSelezionata, 5);

                            JOptionPane.showMessageDialog(null, "Riga modificata con successo");
                        } catch (SQLException ex) {
                            Logger.getLogger(ElencoQuiz.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Errore durante la modifica della riga");
                        }
                    }
                }
            }

            if (materia.equals("geografia")) {
                QuizGeo qg = new QuizGeo();
                for (int i = 0; i < qg.quiz.size(); i++) {
                    ArrayList<String> quizTab = qg.quiz.get(i);
                    String materiaDb = "geografia";
                    String domandaDb = quizTab.get(0);
                    String risCorrDb = quizTab.get(1);
                    String ris1SbaglDb = quizTab.get(2);
                    String ris2SbaglDb = quizTab.get(3);
                    String ris3SbaglDb = quizTab.get(4);

                    if (materia.equals(materiaDb) && domanda.equals(domandaDb) && risCorr.equals(risCorrDb) && ris1Sbagl.equals(ris1SbaglDb) && ris2Sbagl.equals(ris2SbaglDb) && ris3Sbagl.equals(ris3SbaglDb)) {
                        JOptionPane.showMessageDialog(null, "Modifica prima i campi attraverso la tabella e poi seleziona il menu cliccando sulla riga da modificare");
                        return; // Esco dal metodo se trovo una corrispondenza
                    } else {
                        String materiaNuovo = (String) m.getValueAt(rigaSelezionata, 0);
                        String domandaNuovo = (String) m.getValueAt(rigaSelezionata, 1);
                        String risCorrNuovo = (String) m.getValueAt(rigaSelezionata, 2);
                        String ris1SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 3);
                        String ris2SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 4);
                        String ris3SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 5);

                        try {
                            Connection c = DriverManager.getConnection(connessione.Jdbc);

                            String q = "UPDATE ";
                            if (materia.equalsIgnoreCase("storia")) {
                                q += "quiz_storia";
                            } else if (materia.equalsIgnoreCase("geografia")) {
                                q += "quiz_geo";
                            } else if (materia.equalsIgnoreCase("cinema")) {
                                q += "quiz_cinema";
                            } else if (materia.equalsIgnoreCase("sport")) {
                                q += "quiz_sport";
                            } else {
                                JOptionPane.showMessageDialog(this, "Materia non supportata");
                                return;
                            }
                            q += " SET domanda = ?, risposta_corretta = ?, risposta_sbagliata1 = ?, risposta_sbagliata2 = ?, risposta_sbagliata3 = ? WHERE domanda = ?";

                            PreparedStatement s = c.prepareStatement(q);
                            s.setString(1, domandaNuovo);
                            s.setString(2, risCorrNuovo);
                            s.setString(3, ris1SbaglNuovo);
                            s.setString(4, ris2SbaglNuovo);
                            s.setString(5, ris3SbaglNuovo);
                            s.setString(6, domanda); // Utilizzo la domanda originale per fare la ricerca per l'aggiornamento

                            s.executeUpdate();

                            // Aggiorno i valori nella tabella
                            m.setValueAt(materiaNuovo, rigaSelezionata, 0);
                            m.setValueAt(domandaNuovo, rigaSelezionata, 1);
                            m.setValueAt(risCorrNuovo, rigaSelezionata, 2);
                            m.setValueAt(ris1SbaglNuovo, rigaSelezionata, 3);
                            m.setValueAt(ris2SbaglNuovo, rigaSelezionata, 4);
                            m.setValueAt(ris3SbaglNuovo, rigaSelezionata, 5);

                            JOptionPane.showMessageDialog(null, "Riga modificata con successo");
                        } catch (SQLException ex) {
                            Logger.getLogger(ElencoQuiz.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Errore durante la modifica della riga");
                        }
                    }
                }
            }

            if (materia.equals("cinema")) {
                QuizCinema qc = new QuizCinema();
                for (int i = 0; i < qc.quiz.size(); i++) {
                    ArrayList<String> quizTab = qc.quiz.get(i);
                    String materiaDb = "cinema";
                    String domandaDb = quizTab.get(0);
                    String risCorrDb = quizTab.get(1);
                    String ris1SbaglDb = quizTab.get(2);
                    String ris2SbaglDb = quizTab.get(3);
                    String ris3SbaglDb = quizTab.get(4);

                    if (materia.equals(materiaDb) && domanda.equals(domandaDb) && risCorr.equals(risCorrDb) && ris1Sbagl.equals(ris1SbaglDb) && ris2Sbagl.equals(ris2SbaglDb) && ris3Sbagl.equals(ris3SbaglDb)) {
                        JOptionPane.showMessageDialog(null, "Modifica prima i campi attraverso la tabella e poi seleziona il menu cliccando sulla riga da modificare");
                        return; // Esco dal metodo se trovo una corrispondenza
                    } else {
                        String materiaNuovo = (String) m.getValueAt(rigaSelezionata, 0);
                        String domandaNuovo = (String) m.getValueAt(rigaSelezionata, 1);
                        String risCorrNuovo = (String) m.getValueAt(rigaSelezionata, 2);
                        String ris1SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 3);
                        String ris2SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 4);
                        String ris3SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 5);

                        try {
                            Connection c = DriverManager.getConnection(connessione.Jdbc);

                            String q = "UPDATE ";
                            if (materia.equalsIgnoreCase("storia")) {
                                q += "quiz_storia";
                            } else if (materia.equalsIgnoreCase("geografia")) {
                                q += "quiz_geo";
                            } else if (materia.equalsIgnoreCase("cinema")) {
                                q += "quiz_cinema";
                            } else if (materia.equalsIgnoreCase("sport")) {
                                q += "quiz_sport";
                            } else {
                                JOptionPane.showMessageDialog(this, "Materia non supportata");
                                return;
                            }
                            q += " SET domanda = ?, risposta_corretta = ?, risposta_sbagliata1 = ?, risposta_sbagliata2 = ?, risposta_sbagliata3 = ? WHERE domanda = ?";

                            PreparedStatement s = c.prepareStatement(q);
                            s.setString(1, domandaNuovo);
                            s.setString(2, risCorrNuovo);
                            s.setString(3, ris1SbaglNuovo);
                            s.setString(4, ris2SbaglNuovo);
                            s.setString(5, ris3SbaglNuovo);
                            s.setString(6, domanda); // Utilizzo la domanda originale per fare la ricerca per l'aggiornamento

                            s.executeUpdate();

                            // Aggiorno i valori nella tabella
                            m.setValueAt(materiaNuovo, rigaSelezionata, 0);
                            m.setValueAt(domandaNuovo, rigaSelezionata, 1);
                            m.setValueAt(risCorrNuovo, rigaSelezionata, 2);
                            m.setValueAt(ris1SbaglNuovo, rigaSelezionata, 3);
                            m.setValueAt(ris2SbaglNuovo, rigaSelezionata, 4);
                            m.setValueAt(ris3SbaglNuovo, rigaSelezionata, 5);

                            JOptionPane.showMessageDialog(null, "Riga modificata con successo");
                        } catch (SQLException ex) {
                            Logger.getLogger(ElencoQuiz.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Errore durante la modifica della riga");
                        }
                    }
                }
            }

            if (materia.equals("sport")) {
                QuizSport qsp = new QuizSport();
                for (int i = 0; i < qsp.quiz.size(); i++) {
                    ArrayList<String> quizTab = qsp.quiz.get(i);
                    String materiaDb = "sport";
                    String domandaDb = quizTab.get(0);
                    String risCorrDb = quizTab.get(1);
                    String ris1SbaglDb = quizTab.get(2);
                    String ris2SbaglDb = quizTab.get(3);
                    String ris3SbaglDb = quizTab.get(4);

                    if (materia.equals(materiaDb) && domanda.equals(domandaDb) && risCorr.equals(risCorrDb) && ris1Sbagl.equals(ris1SbaglDb) && ris2Sbagl.equals(ris2SbaglDb) && ris3Sbagl.equals(ris3SbaglDb)) {
                        JOptionPane.showMessageDialog(null, "Modifica prima i campi attraverso la tabella e poi seleziona il menu cliccando sulla riga da modificare");
                        return; // Esco dal metodo se trovo una corrispondenza
                    } else {
                        String materiaNuovo = (String) m.getValueAt(rigaSelezionata, 0);
                        String domandaNuovo = (String) m.getValueAt(rigaSelezionata, 1);
                        String risCorrNuovo = (String) m.getValueAt(rigaSelezionata, 2);
                        String ris1SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 3);
                        String ris2SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 4);
                        String ris3SbaglNuovo = (String) m.getValueAt(rigaSelezionata, 5);

                        try {
                            Connection c = DriverManager.getConnection(connessione.Jdbc);

                            String q = "UPDATE ";
                            if (materia.equalsIgnoreCase("storia")) {
                                q += "quiz_storia";
                            } else if (materia.equalsIgnoreCase("geografia")) {
                                q += "quiz_geo";
                            } else if (materia.equalsIgnoreCase("cinema")) {
                                q += "quiz_cinema";
                            } else if (materia.equalsIgnoreCase("sport")) {
                                q += "quiz_sport";
                            } else {
                                JOptionPane.showMessageDialog(this, "Materia non supportata");
                                return;
                            }
                            q += " SET domanda = ?, risposta_corretta = ?, risposta_sbagliata1 = ?, risposta_sbagliata2 = ?, risposta_sbagliata3 = ? WHERE domanda = ?";

                            PreparedStatement s = c.prepareStatement(q);
                            s.setString(1, domandaNuovo);
                            s.setString(2, risCorrNuovo);
                            s.setString(3, ris1SbaglNuovo);
                            s.setString(4, ris2SbaglNuovo);
                            s.setString(5, ris3SbaglNuovo);
                            s.setString(6, domanda); // Utilizzo la domanda originale per fare la ricerca per l'aggiornamento

                            s.executeUpdate();

                            // Aggiorno i valori nella tabella
                            m.setValueAt(materiaNuovo, rigaSelezionata, 0);
                            m.setValueAt(domandaNuovo, rigaSelezionata, 1);
                            m.setValueAt(risCorrNuovo, rigaSelezionata, 2);
                            m.setValueAt(ris1SbaglNuovo, rigaSelezionata, 3);
                            m.setValueAt(ris2SbaglNuovo, rigaSelezionata, 4);
                            m.setValueAt(ris3SbaglNuovo, rigaSelezionata, 5);

                            JOptionPane.showMessageDialog(null, "Riga modificata con successo");
                        } catch (SQLException ex) {
                            Logger.getLogger(ElencoQuiz.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Errore durante la modifica della riga");
                        }
                    }
                }
            }

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L_domanda;
    private javax.swing.JLabel L_materia;
    private javax.swing.JLabel L_risCorr;
    private javax.swing.JLabel L_risSbagl1;
    private javax.swing.JLabel L_risSbagl2;
    private javax.swing.JLabel L_risSbagl3;
    private javax.swing.JPanel PanelTabella;
    private javax.swing.JButton b_aggiungi;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tf_domanda;
    private javax.swing.JTextField tf_materia;
    private javax.swing.JTextField tf_risCorr;
    private javax.swing.JTextField tf_risSbagl1;
    private javax.swing.JTextField tf_risSbagl2;
    private javax.swing.JTextField tf_risSbagl3;
    // End of variables declaration//GEN-END:variables
}
